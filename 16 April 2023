Q.You are given two arrays A and B each of length N. You can perform the following operation on array A zero or more times. 

Select any two indices i and j, 1 <= i , j <= N and i != j
Set A[i] = A[i] + 2 and A[j] = A[j]-2
Find the minimum number of operations required to make A and B equal.

Note :

Two arrays are said to be equal if the frequency of each element is equal in both of them.
Arrays may contain duplicate elements.






class Solution {
    public static long solve(int N, int[] A, int[] B) {
        // code here
        Arrays.sort(A);
        Arrays.sort(B);
        
         List<Integer> Ao = new ArrayList<Integer>();
        List<Integer> Ae = new ArrayList<Integer>();
        List<Integer> Bo = new ArrayList<Integer>();
        List<Integer> Be = new ArrayList<Integer>();
        long s1 = 0, s2 = 0;
        for (int i = 0; i < N; i++) {
            s1 += A[i];
            s2 += B[i];
            if (A[i] % 2 != 0) {
                Ao.add(A[i]);
            } else {
                Ae.add(A[i]);
            }
            if (B[i] % 2 != 0) {
                Bo.add(B[i]);
            } else {
                Be.add(B[i]);
            }
        }
         if (s1 != s2 || Ao.size() != Bo.size()) {
            return -1;
        }
          long ans = 0;
        for (int i = 0; i < Ao.size(); i++) {
            ans += Math.abs(Ao.get(i) - Bo.get(i));
        }
        for (int i = 0; i < Ae.size(); i++) {
            ans += Math.abs(Ae.get(i) - Be.get(i));
        }
        return ans/4;
    }
}
